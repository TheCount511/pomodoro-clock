{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["timerId","App","increaseTime","value","type","state","start_stop","setState","min","decreaseTime","reset","clearInterval","document","getElementById","pause","currentTime","breakTime","sessionTime","sec","countdown","display","timerStyle","color","resetTime","playSound","play","timer","time1","time2","setInterval","mins","Math","floor","secs","startTimer","pauseTimer","this","className","id","onClick","style","preload","src","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d37963b7.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nlet timerId;\n\n\nclass App extends Component {constructor() {super();\n        this.state = {\n            breakTime: 5,\n            sessionTime: 25,\n            start_stop: false,\n            display: \"Session\",\n            countdown: \"inactive\",\n            min:25,\n            sec:0,\n            timerStyle: {color: '#6d6f6d'}  \n        }\n       }\n\n    increaseTime = (value, type) => {\n            if(!this.state.start_stop)\n       { (value < 60 && this.setState({[type]: value + 1\n               }, ()=>{ \n               (type===\"sessionTime\" && this.setState({\n                   min:this.state[type]})\n                   )})) }\n    }\n    decreaseTime = (value, type) => {\n\n        if (!this.state.start_stop)\n        {(value> 1 && this.setState({[type]: value - 1\n                }, ()=>{ \n                (type===\"sessionTime\" && this.setState({\n                    min:this.state[type]})\n                    )}))}\n    }\n\n    reset = () => {\n         clearInterval(timerId)\n        \n        document.getElementById(\"beep\").pause();\n        document.getElementById(\"beep\").currentTime = 0;\n        let stop=(resetTime)=>{\n               \n                resetTime()\n        }\n\n        let resetTimer=()=>{\n        this.setState({ \n        breakTime: 5, \n        sessionTime: 25, \n        min:25, \n        sec:0, \n        start_stop: false, \n        countdown:\"inactive\",\n        display: \"Session\",\n        timerStyle:{color:'#6d6f6d'}\n        })     \n        }\n\n        stop(resetTimer);\n    }\n    \nplaySound = () => {\n       \n      document.getElementById(\"beep\").play();\n    }\n\ntimer =(time1, time2 )=>{\n    let countdown\n    if(this.state.countdown===\"active\"){\n       countdown = (this.state.min + (this.state.sec/60)) * 60 * 1000;\n       this.setState({countdown:\"inactive\" }) \n    }\n    else{\n      countdown =  time1 * 60 * 1000;\n    } \n    timerId =  setInterval(()=>{\n    countdown -= 1000;\n    let mins = Math.floor(countdown / (60 * 1000));\n    let secs = Math.floor((countdown - (mins * 60 * 1000)) / 1000);\n\nif (mins<1){\n    this.setState({\n        timerStyle: {color: 'red'}\n    })\n}\n\nif (countdown < 0) {\n    clearInterval(timerId)\n\n    this.setState({display: (this.state.display===\"Session\"?\"Break\":\"Session\"), min:time2, sec:0,\n        timerStyle:{color:'#6d6f6d'}\n} , ()=>{\n        \n        this.timer(time2, time1);\n    })\n     \n}\nelse if(countdown ===0){\n    this.playSound()\n    this.setState(state=>({\n            min:mins,\n            sec:secs       \n             }))\n}\nelse{\nthis.setState({\n    min:mins, \n    sec:secs})\n    } }, 1000);\n}\n\nstartTimer = () => { \n\nthis.setState({start_stop: true}, ()=>{\n    this.timer(this.state.sessionTime, this.state.breakTime)\n})}\n\npauseTimer = () => {this.setState({ start_stop: false, countdown:\"active\"}, ()=>  {\n    clearInterval(timerId);\n}\n    )}\n\n\nrender() {\nconst { breakTime, display, start_stop, sessionTime, min, sec} = this.state;\nconst {increaseTime, decreaseTime, reset, startTimer, pauseTimer} = this;\n        \nreturn (\n<div className=\"content\">\n<h1>Pomodoro Clock</h1>\n<div className=\"set\">\n<div>\n    <div id=\"break-label\">Break Length</div>\n    <ul className=\"buttons\">\n     <li>\n        <i className=\"fas fa-arrow-up\"id=\"break-increment\"onClick={()=>increaseTime(breakTime,\"breakTime\")}>\n        </i>\n    </li>\n    <li><span id=\"break-length\">{breakTime}</span>\n    </li>\n    <li>\n    <i className=\"fas fa-arrow-down\"id=\"break-decrement\"onClick={()=>decreaseTime(breakTime,\"breakTime\")}></i>\n    </li>\n    </ul>\n</div>\n<div>\n    <div id=\"session-label\">Session Length</div>\n    <ul className=\"buttons\">\n    <li>\n        <i className=\"fas fa-arrow-up\"id=\"session-increment\"onClick={()=>increaseTime(sessionTime,\"sessionTime\")}>\n        </i>\n    </li>\n    <li>\n    <span id=\"session-length\">{sessionTime}</span>\n    </li>\n    <li>\n    <i className=\"fas fa-arrow-down\"id=\"session-decrement\"onClick={()=>decreaseTime(sessionTime,\"sessionTime\")}></i>\n    </li>\n    </ul>\n</div>\n</div>     \n<div className=\"session\">\n    <div id=\"timer-label\">{display}</div>\n    <span id=\"time-left\" style={this.state.timerStyle}>{`${(min<10?\"0\":\"\")+min}:${(sec<10?\"0\":\"\")+sec}`}</span>\n</div>\n<div className=\"controls\">\n{start_stop ?\n<i className=\"fas fa-pause\"id=\"start_stop\"onClick={pauseTimer}>\n</i> :\n<i className=\"fas fa-play\"id=\"start_stop\"onClick={startTimer}>\n</i>}\n<i className=\"fas fa-redo\"id=\"reset\"onClick={reset}>\n</i>\n<audio\n    id=\"beep\"\n    preload=\"auto\"\n    src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n    ref=\"beep\"\n    />\n</div>\n\n</div>\n        )\n    }\n}\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}